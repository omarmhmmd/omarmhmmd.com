---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

type Props = {
  src: string | ImageMetadata;
  alt: string;
  title: string;
};

const { src, alt, title } = Astro.props;

// Function to convert `/italic text/` to <i> tags
const convertSlashToHtml = (text: string) => {
  return text.replace(/"([^"]+)"/g, '<i>$1</i>'); // Match "text" and convert to <i> tags
};

// Helper function to extract the base domain from a URL
const extractBaseDomain = (url: string) => {
  try {
    const hostname = new URL(url).hostname;
    const parts = hostname.split(".");
    return parts.slice(-2).join("."); // Extract the base domain (e.g., example.com)
  } catch (e) {
    console.error("Invalid URL:", url, e);
    return url; // Return the original URL in case of error
  }
};

// Convert the alt text to HTML with italics from slashes
const parsedAlt = convertSlashToHtml(alt);

// Regex to match and convert URLs to links in the alt text
const titleWithLink = parsedAlt.replace(
  /(https?:\/\/[^\s]+)/g,
  (url) => {
    const domain = extractBaseDomain(url);
    return `<a href="${url}" target="_blank">${domain}</a>`;
  }
);
---

<style>
  figcaption {
    font-size: var(--smlFont);
    margin-top: 4px;
  }
</style>

<figure>
  {
    typeof src === "string" ? (
      <img src={src} alt={alt} />
    ) : (
      <Image src={src} alt={alt} />
    )
  }

  {alt && <figcaption set:html={titleWithLink} />}
</figure>
